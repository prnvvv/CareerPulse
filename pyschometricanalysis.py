# -*- coding: utf-8 -*-
"""PyschometricAnalysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JyKIN1_3aI4lYBTd2BmgJtAR2q0Mpzv8
"""

import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

df  = pd.read_csv("/content/psychometric_data_normalized.csv")
df

columns = df.columns
columns

length = len(columns)
length

results_set = columns[24: ]

X = df[columns[: 24]]

le = LabelEncoder()
for i in columns[: 24]:
  X[i] = le.fit_transform(X[i])

"""#Optimism"""

y = df[results_set[0]]

Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size=0.2)

model = DecisionTreeRegressor()
model.fit(Xtrain, ytrain)
predictions = model.predict(Xtest)

print(accuracy_score(predictions, ytest))

"""#Self_Efficacy"""

y = df[results_set[1]]

Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size=0.2)

model = DecisionTreeRegressor()
model.fit(Xtrain, ytrain)
predictions = model.predict(Xtest)

print(accuracy_score(predictions, ytest))

"""#Resilience"""

y = df[results_set[2]]

Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size=0.2)

model = DecisionTreeRegressor()
model.fit(Xtrain, ytrain)
predictions = model.predict(Xtest)

print(accuracy_score(predictions, ytest))

"""#Stress_Tolerance"""

y = df[results_set[3]]

Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size=0.2)

model = DecisionTreeRegressor()
model.fit(Xtrain, ytrain)
predictions = model.predict(Xtest)

print(accuracy_score(predictions, ytest))

"""#Motivation"""

y = df[results_set[4]]

Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size=0.2)

model = DecisionTreeRegressor()
model.fit(Xtrain, ytrain)
predictions = model.predict(Xtest)

print(accuracy_score(predictions, ytest))

"""#Social_Skills"""

y = df[results_set[4]]

Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size=0.2)

model = DecisionTreeRegressor()
model.fit(Xtrain, ytrain)
predictions = model.predict(Xtest)

print(accuracy_score(predictions, ytest))

"""#Life_Satisfaction"""

y = df[results_set[4]]

Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size=0.2)

model = DecisionTreeRegressor()
model.fit(Xtrain, ytrain)
predictions = model.predict(Xtest)

print(accuracy_score(predictions, ytest))

