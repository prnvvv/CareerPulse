# -*- coding: utf-8 -*-
"""PyschometricAnalysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JyKIN1_3aI4lYBTd2BmgJtAR2q0Mpzv8
"""

import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

df  = pd.read_csv(r"C:\Users\Prannavakhanth\Documents\CareerPulse\psychometric_data_normalized.csv")
df

columns = df.columns
columns

length = len(columns)
length

results_set = columns[24: ]

X = df[columns[: 24]]

le = LabelEncoder()
for i in columns[: 24]:
  X[i] = le.fit_transform(X[i])

"""#Optimism"""

y = df[results_set[0]]

Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size=0.2)

model = DecisionTreeRegressor()
model.fit(Xtrain, ytrain)
predictions = model.predict(Xtest)

print(accuracy_score(predictions, ytest))

"""#Self_Efficacy"""

y = df[results_set[1]]

Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size=0.2)

model = DecisionTreeRegressor()
model.fit(Xtrain, ytrain)
predictions = model.predict(Xtest)

print(accuracy_score(predictions, ytest))

"""#Resilience"""

y = df[results_set[2]]

Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size=0.2)

model = DecisionTreeRegressor()
model.fit(Xtrain, ytrain)
predictions = model.predict(Xtest)

print(accuracy_score(predictions, ytest))

"""#Stress_Tolerance"""

y = df[results_set[3]]

Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size=0.2)

model = DecisionTreeRegressor()
model.fit(Xtrain, ytrain)
predictions = model.predict(Xtest)

print(accuracy_score(predictions, ytest))

"""#Motivation"""

y = df[results_set[4]]

Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size=0.2)

model = DecisionTreeRegressor()
model.fit(Xtrain, ytrain)
predictions = model.predict(Xtest)

print(accuracy_score(predictions, ytest))

"""#Social_Skills"""

y = df[results_set[4]]

Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size=0.2)

model = DecisionTreeRegressor()
model.fit(Xtrain, ytrain)
predictions = model.predict(Xtest)

print(accuracy_score(predictions, ytest))

"""#Life_Satisfaction"""

y = df[results_set[4]]

Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size=0.2)

model = DecisionTreeRegressor()
model.fit(Xtrain, ytrain)
predictions = model.predict(Xtest)


col=df.columns.tolist()
col=col[:24]

print(accuracy_score(predictions, ytest))
def test(k,ar):
  if k in range(6):
    ar.append(k)
    return 0
  else :
    print("Pls enter values only in the range 5")
    return 1
ar=[]
for i in range(24):
  k=int(input(f'{col[i]}:-'))
  t=test(k,ar)
  while(t):
    k=int(input(f'{col[i]}:-'))
    t=test(k,ar)
t=pd.DataFrame([ar],columns=col)
y_pred=[]
for i in range(5):
  y = df[results_set[i]]

  Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size=0.2)

  model = DecisionTreeRegressor()
  model.fit(Xtrain, ytrain)
  y_pred.append(model.predict(t))
for i in y_pred:
  print(i)

